{"ast":null,"code":"import { all, call, takeLatest, put, select } from 'redux-saga/effects';\nimport UserActionTypes from '../user/user.types';\nimport { clearCart, setCartFromFirebase } from './cart.actions';\nimport { getUserCartRef } from '../../firebase/firebase.utils';\nimport { selectCurrentUser } from '../user/user.selectors';\nimport { selectCartItems } from './cart.selectors';\nimport CartActionTypes from './cart.types';\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n}\nexport function* updateCartInFirebase() {\n  const currentUser = yield select(selectCurrentUser);\n\n  if (currentUser) {\n    try {\n      const cartRef = yield getUserCartRef(currentUser.id);\n      const cartItems = yield select(selectCartItems);\n      yield cartRef.update({\n        cartItems\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\nexport function* checkCartFromFirebase({\n  payload: user\n}) {\n  const cartRef = yield getUserCartRef(user.id);\n  const cartSnapshot = yield cartRef.get();\n  yield put(setCartFromFirebase(cartSnapshot.data().cartItems));\n}\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\nexport function* onUserSignIn() {\n  yield takeLatest(UserActionTypes.SIGN_IN_SUCCESS, checkCartFromFirebase);\n}\nexport function* onCartChange() {\n  yield takeLatest([CartActionTypes.ADD_ITEM, CartActionTypes.REMOVE_ITEM, CartActionTypes.CLEAR_ITEM_FROM_CART], updateCartInFirebase);\n}\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onCartChange), call(onUserSignIn)]);\n}","map":{"version":3,"sources":["C:/Users/Mayank Joshi/Desktop/WEB/react/crwn-clothing/client/src/redux/cart/cart.sagas.js"],"names":["all","call","takeLatest","put","select","UserActionTypes","clearCart","setCartFromFirebase","getUserCartRef","selectCurrentUser","selectCartItems","CartActionTypes","clearCartOnSignOut","updateCartInFirebase","currentUser","cartRef","id","cartItems","update","error","console","log","checkCartFromFirebase","payload","user","cartSnapshot","get","data","onSignOutSuccess","SIGN_OUT_SUCCESS","onUserSignIn","SIGN_IN_SUCCESS","onCartChange","ADD_ITEM","REMOVE_ITEM","CLEAR_ITEM_FROM_CART","cartSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,MAArC,QAAmD,oBAAnD;AAEA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,SAASC,SAAT,EAAmBC,mBAAnB,QAA8C,gBAA9C;AAEA,SAAQC,cAAR,QAA6B,+BAA7B;AACA,SAAQC,iBAAR,QAAgC,wBAAhC;AACA,SAAQC,eAAR,QAA8B,kBAA9B;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,kBAAV,GAA+B;AACpC,QAAMT,GAAG,CAACG,SAAS,EAAV,CAAT;AACD;AAED,OAAO,UAAUO,oBAAV,GAAiC;AACtC,QAAMC,WAAW,GAAG,MAAMV,MAAM,CAACK,iBAAD,CAAhC;;AACA,MAAGK,WAAH,EAAgB;AACd,QAAI;AACF,YAAMC,OAAO,GAAG,MAAMP,cAAc,CAACM,WAAW,CAACE,EAAb,CAApC;AACA,YAAMC,SAAS,GAAG,MAAMb,MAAM,CAACM,eAAD,CAA9B;AACA,YAAMK,OAAO,CAACG,MAAR,CAAe;AAACD,QAAAA;AAAD,OAAf,CAAN;AACD,KAJD,CAIC,OAAME,KAAN,EAAa;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;AACF;AAED,OAAO,UAAUG,qBAAV,CAAgC;AAACC,EAAAA,OAAO,EAAEC;AAAV,CAAhC,EAAiD;AACtD,QAAMT,OAAO,GAAG,MAAMP,cAAc,CAACgB,IAAI,CAACR,EAAN,CAApC;AACA,QAAMS,YAAY,GAAG,MAAMV,OAAO,CAACW,GAAR,EAA3B;AACA,QAAMvB,GAAG,CAACI,mBAAmB,CAACkB,YAAY,CAACE,IAAb,GAAoBV,SAArB,CAApB,CAAT;AACD;AAED,OAAO,UAAUW,gBAAV,GAA6B;AAClC,QAAM1B,UAAU,CAACG,eAAe,CAACwB,gBAAjB,EAAmCjB,kBAAnC,CAAhB;AACD;AAED,OAAO,UAAUkB,YAAV,GAAyB;AAC9B,QAAM5B,UAAU,CAACG,eAAe,CAAC0B,eAAjB,EAAkCT,qBAAlC,CAAhB;AACD;AAED,OAAO,UAAUU,YAAV,GAAyB;AAC9B,QAAM9B,UAAU,CACd,CACES,eAAe,CAACsB,QADlB,EAEEtB,eAAe,CAACuB,WAFlB,EAGEvB,eAAe,CAACwB,oBAHlB,CADc,EAMdtB,oBANc,CAAhB;AAQD;AAED,OAAO,UAAUuB,SAAV,GAAsB;AAC3B,QAAMpC,GAAG,CAAC,CACRC,IAAI,CAAC2B,gBAAD,CADI,EAER3B,IAAI,CAAC+B,YAAD,CAFI,EAGR/B,IAAI,CAAC6B,YAAD,CAHI,CAAD,CAAT;AAID","sourcesContent":["import { all, call, takeLatest, put, select } from 'redux-saga/effects';\r\n\r\nimport UserActionTypes from '../user/user.types';\r\nimport { clearCart,setCartFromFirebase } from './cart.actions';\r\n\r\nimport {getUserCartRef} from '../../firebase/firebase.utils';\r\nimport {selectCurrentUser} from '../user/user.selectors';\r\nimport {selectCartItems} from './cart.selectors';\r\n\r\nimport CartActionTypes from './cart.types';\r\n\r\nexport function* clearCartOnSignOut() {\r\n  yield put(clearCart());\r\n}\r\n\r\nexport function* updateCartInFirebase() {\r\n  const currentUser = yield select(selectCurrentUser);\r\n  if(currentUser) {\r\n    try {\r\n      const cartRef = yield getUserCartRef(currentUser.id);\r\n      const cartItems = yield select(selectCartItems);\r\n      yield cartRef.update({cartItems});\r\n    }catch(error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n}\r\n\r\nexport function* checkCartFromFirebase({payload: user}) {\r\n  const cartRef = yield getUserCartRef(user.id);\r\n  const cartSnapshot = yield cartRef.get();\r\n  yield put(setCartFromFirebase(cartSnapshot.data().cartItems));\r\n}\r\n\r\nexport function* onSignOutSuccess() {\r\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\r\n}\r\n\r\nexport function* onUserSignIn() {\r\n  yield takeLatest(UserActionTypes.SIGN_IN_SUCCESS, checkCartFromFirebase);\r\n}\r\n\r\nexport function* onCartChange() {\r\n  yield takeLatest(\r\n    [\r\n      CartActionTypes.ADD_ITEM,\r\n      CartActionTypes.REMOVE_ITEM,\r\n      CartActionTypes.CLEAR_ITEM_FROM_CART\r\n    ],\r\n    updateCartInFirebase\r\n  );\r\n}\r\n\r\nexport function* cartSagas() {\r\n  yield all([\r\n    call(onSignOutSuccess),\r\n    call(onCartChange),\r\n    call(onUserSignIn)]);\r\n}"]},"metadata":{},"sourceType":"module"}